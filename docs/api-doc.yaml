openapi: 3.0.0
info:
  version: 0.0.1
  title: "Godspeed: Sample Microservice"
  description: Sample API calls demonstrating the functionality of Godspeed framework
  termsOfService: http://swagger.io/terms/
  contact:
    name: Mindgrep Technologies Pvt Ltd
    email: talktous@mindgrep.com
    url: https://docs.mindgrep.com/docs/microservices/intro
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: http://localhost:3000
paths:
  "/postgres/category/{id}":
    get:
      summary: Fetch Category
      description: Fetch Category from database
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        content:
          application/json:
            schema:
              type: object
    put:
      summary: Update a Category
      description: Update Category from database
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/definitions/postgres/Category"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        content:
          application/json:
            schema:
              type: object
    delete:
      summary: Delete a Category
      description: Delete Category from database
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        content:
          application/json:
            schema:
              type: object
  /postgres/category:
    post:
      summary: Create a new Category
      description: Create Category from database
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/definitions/postgres/Category"
      responses:
        content:
          application/json:
            schema:
              type: object
  /postgres/category/search:
    post:
      summary: Fetch multiple Category
      description: Fetch multiple Category from database
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        content:
          application/json:
            schema:
              type: array
  openapi:
    undefined: {}
  info:
    undefined: {}
  paths:
    undefined: {}
  components:
    undefined: {}
  "/postgres/order/{id}":
    get:
      summary: Fetch Order
      description: Fetch Order from database
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        content:
          application/json:
            schema:
              type: object
    put:
      summary: Update a Order
      description: Update Order from database
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/definitions/postgres/Order"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        content:
          application/json:
            schema:
              type: object
    delete:
      summary: Delete a Order
      description: Delete Order from database
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        content:
          application/json:
            schema:
              type: object
  /postgres/order:
    post:
      summary: Create a new Order
      description: Create Order from database
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/definitions/postgres/Order"
      responses:
        content:
          application/json:
            schema:
              type: object
  /postgres/order/search:
    post:
      summary: Fetch multiple Order
      description: Fetch multiple Order from database
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        content:
          application/json:
            schema:
              type: array
  "/postgres/orderitem/{id}":
    get:
      summary: Fetch OrderItem
      description: Fetch OrderItem from database
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        content:
          application/json:
            schema:
              type: object
    put:
      summary: Update a OrderItem
      description: Update OrderItem from database
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/definitions/postgres/OrderItem"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        content:
          application/json:
            schema:
              type: object
    delete:
      summary: Delete a OrderItem
      description: Delete OrderItem from database
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        content:
          application/json:
            schema:
              type: object
  /postgres/orderitem:
    post:
      summary: Create a new OrderItem
      description: Create OrderItem from database
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/definitions/postgres/OrderItem"
      responses:
        content:
          application/json:
            schema:
              type: object
  /postgres/orderitem/search:
    post:
      summary: Fetch multiple OrderItem
      description: Fetch multiple OrderItem from database
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        content:
          application/json:
            schema:
              type: array
  "/postgres/owner/{id}":
    get:
      summary: Fetch Owner
      description: Fetch Owner from database
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        content:
          application/json:
            schema:
              type: object
    put:
      summary: Update a Owner
      description: Update Owner from database
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/definitions/postgres/Owner"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        content:
          application/json:
            schema:
              type: object
    delete:
      summary: Delete a Owner
      description: Delete Owner from database
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        content:
          application/json:
            schema:
              type: object
  /postgres/owner:
    post:
      summary: Create a new Owner
      description: Create Owner from database
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/definitions/postgres/Owner"
      responses:
        content:
          application/json:
            schema:
              type: object
  /postgres/owner/search:
    post:
      summary: Fetch multiple Owner
      description: Fetch multiple Owner from database
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        content:
          application/json:
            schema:
              type: array
  "/postgres/user/{id}":
    get:
      summary: Fetch User
      description: Fetch User from database
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        content:
          application/json:
            schema:
              type: object
    put:
      summary: Update a User
      description: Update User from database
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/definitions/postgres/User"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        content:
          application/json:
            schema:
              type: object
    delete:
      summary: Delete a User
      description: Delete User from database
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        content:
          application/json:
            schema:
              type: object
  /postgres/user:
    post:
      summary: Create a new User
      description: Create User from database
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/definitions/postgres/User"
      responses:
        content:
          application/json:
            schema:
              type: object
  /postgres/user/search:
    post:
      summary: Fetch multiple User
      description: Fetch multiple User from database
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        content:
          application/json:
            schema:
              type: array
definitions:
  postgres:
    definitions:
      postgres:
        Owner:
          type: object
          properties:
            email:
              type: string
            name:
              type: string
              nullable: true
        Restaurant:
          type: object
          properties:
            createdAt:
              type: string
              format: date-time
            name:
              type: string
            since:
              type: string
              format: date-time
            isOpen:
              type: boolean
              default: false
            opsStartTime:
              type: string
              format: date-time
            opsEndTime:
              type: string
              format: date-time
            ownerId:
              type: integer
              nullable: true
            slug:
              type: string
            description:
              type: string
              nullable: true
            location:
              type: string
            city:
              type: string
              nullable: true
        Category:
          type: object
          properties:
            name:
              type: string
        MenuItems:
          type: object
          properties:
            name:
              type: string
            description:
              type: string
              nullable: true
            price:
              type: number
            couponCode:
              type: string
              nullable: true
            categoryId:
              type: integer
            restaurantId:
              type: integer
        User:
          type: object
          properties:
            name:
              type: string
            email:
              type: string
        Order:
          type: object
          properties:
            fromRestaurant:
              type: integer
            orderStatus:
              type: string
              default: NOT_INITIATED
              enum:
                - INITIATED
                - NOT_INITIATED
                - WAITING_FOR_APPROVAL_FROM_RESTAURANT
                - WAITING_FOR_DELIVERY_PARTNER
                - PLACED
                - PICKUP_BY_DELIVERY_PARTNER
                - DELIVERED
                - READY_TO_PICKUP
            placedAt:
              type: string
              format: date-time
              nullable: true
            fulfilledAt:
              type: string
              format: date-time
              nullable: true
            userId:
              type: integer
        OrderItem:
          type: object
          properties:
            menuItemId:
              type: integer
            quantity:
              type: integer
            orderId:
              type: integer
